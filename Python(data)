import pandas as pd
import os

def read_data(file_path):
    """Reads data from a file or URL into a Pandas DataFrame, inferring the file type.

    Parameters:
    - file_path: str, path to the file or URL.

    Returns:
    - DataFrame containing the data.
    """
    _, file_extension = os.path.splitext(file_path)
    if file_extension in ['.csv', '']:
        return pd.read_csv(file_path)
    elif file_extension == '.xlsx':
        return pd.read_excel(file_path)
    elif file_extension == '.json':
        return pd.read_json(file_path)
    else:
        raise ValueError("Unsupported file type. Supported types: 'csv', 'xlsx', 'json'.")
import pandas as pd
import numpy as np

def data_summary(df):
    """Prints the average values for numerical columns and the most frequent values for all columns.

    Parameter:
    - df: DataFrame, the data for summary generation.

    Returns:
    - None, prints the summaries to the console.
    """
    # Handling Numeric Columns for Average
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    if not numeric_cols.empty:
        print("Average Values for Numerical Columns:\n")
        averages = df[numeric_cols].mean()
        print(averages, "\n")
    
    # Handling Most Frequent Values for All Columns
    print("Most Frequent Values:\n")
    for col in df.columns:
        most_frequent = df[col].mode()[0]
        print(f"{col}: {most_frequent}")

def handle_missing_values(df, strategy='remove', fill_value=None, method='mean'):
    """Enhanced missing value handling in a DataFrame.

    Parameters:
    - df: DataFrame.
    - strategy: 'remove', 'fill', or 'impute'.
    - fill_value: Value used for filling missing values if strategy is 'fill'.
    - method: Imputation method ('mean', 'median', 'mode') if strategy is 'impute'.

    Returns:
    - DataFrame.
    """
    if strategy == 'remove':
        return df.dropna()
    elif strategy == 'fill':
        return df.fillna(fill_value)
    elif strategy == 'impute':
        for column in df.columns:
            if df[column].dtype == 'object':
                fill_value = df[column].mode()[0] if method == 'mode' else fill_value
            else:
                if method == 'mean':
                    fill_value = df[column].mean()
                elif method == 'median':
                    fill_value = df[column].median()
                elif method == 'mode':
                    fill_value = df[column].mode()[0]
            df[column] = df[column].fillna(fill_value)
        return df
    else:
        raise ValueError("Invalid strategy. Choose 'remove', 'fill', or 'impute'.")
def encode_categorical_data(df, columns, method='onehot'):
    """Encodes categorical columns using specified method.

    Parameters:
    - df: DataFrame.
    - columns: List of column names to encode.
    - method: Encoding method ('onehot' or 'label').

    Returns:
    - DataFrame with encoded columns.
    """
    if method == 'onehot':
        return pd.get_dummies(df, columns=columns)
    elif method == 'label':
        from sklearn.preprocessing import LabelEncoder
        le = LabelEncoder()
        for col in columns:
            df[col] = le.fit_transform(df[col])
        return df
    else:
        raise ValueError("Invalid method. Choose 'onehot' or 'label'.")
df = pd.read_csv('Test_py.csv')
df
data_summary(df)
handle_missing_values(df, 'fill',10)
encode_categorical_data(df , columns=['Units'],method ='onehot' )
